#!/usr/bin/perl

# MANUAL FOR CASC

=pod

=head1 NAME

CASC -- CASC Ain't Simply CRT

=head1 SYNOPSIS

 CASC --in /path/to/file.fasta --outdir /path/to/output/directory/ --ncpus 1 [--conservative]
                     [--help] [--manual]

=head1 DESCRIPTION

CASC is a program that detects and validates CRISPR repeat-spacer arrays from
metagenomic / genomic sequences (long reads or contigs).

CASC will find CRISPR repeat-spacer arrays by using the CRT, and then validate
the putative repeat-spacer array using a few heuristics. Further details
are available in the (nearly complete) manuscript.
 
=head1 OPTIONS

=over 3

=item B<-i, --in>=FILENAME

Input file in FASTA format. (Required)

=item B<-o, --outdir>=DIRECTORY_NAME

Output directory where all output files will be saved. Default will be the working directory. (Optional)

=item B<-n, --ncpus>=INT

Number of CPUs to use. Default = 1 (Optional)

=item B<-c, --conservative>

Be conservative with spacer calls. (Optional)
By default CASC is liberal with calls.

=item B<-s, --silent>

Do not print status updates to screen. (Optional)
By default CASC will print status updates.

=item B<-v, --version>

Displays the version. (Optional)

=item B<-h, --help>

Displays the usage message.  (Optional) 

=item B<-m, --manual>

Displays full manual.  (Optional) 

=back

=head1 DEPENDENCIES

Requires the following Perl libraries:

 POSIX
 threads


=head1 AUTHOR

Written by Daniel Nasko, 
Center for Bioinformatics and Computational Biology, University of Delaware.

=head1 REPORTING BUGS

Report bugs to dnasko@udel.edu

=head1 COPYRIGHT

Copyright 2016 Daniel Nasko.  
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.  
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  

Please acknowledge author and affiliation in published work arising from this script's 
usage <http://bioinformatics.udel.edu/Core/Acknowledge>.

=cut

use strict;
use warnings;
use POSIX;
use Getopt::Long;
use File::Basename;
use Pod::Usage;
use FindBin;
use Cwd 'abs_path';
if ( -d abs_path("$FindBin::Bin/casc_bin/") ) {
    use lib abs_path("$FindBin::Bin/casc_bin/lib");
}
use threads;
my $version = "2.5";

## ARGUMENTS WITH NO DEFAULT
my($infile,$conservative,$silent,$ver,$help,$manual);
## ARGUMENTS WITH DEFAULT
my $outdir = "./casc_output/";
my $ncpus = 1;
my $calling = "Liberal";
GetOptions (	
				"i|in=s"	 =>	\$infile,
				"o|outdir=s"	 =>	\$outdir,
                                "c|conservative" =>     \$conservative,
                                "n|ncpus=i"	 =>	\$ncpus,
                                "s|silent"       =>     \$silent,
                                "v|version"      =>     \$ver,
                                "h|help"	 =>	\$help,
				"m|manual"	 =>	\$manual);

## VALIDATE ARGS
pod2usage(-verbose => 2)  if ($manual);
pod2usage(-verbose => 1)  if ($help);
if ($ver) { print " CASC\n"; die " Version: $version\n\n"; }
pod2usage( -msg  => "\n\n ERROR!  Required argument --in not found.\n", -exitval => 2, -verbose => 1)  if (! $infile );
unless (-e $infile) {die "\n\n ERROR: The input file $infile does not appear to exist\n\n";}
if ($conservative) { $conservative = "yes";$calling = "Conservative";}
else { $conservative = "no";}

## Global Variables
my $MAX = 100;					## used for the progress bar
my $PRGS = 0;
my $UniRefDB = "UniRef_Cas_29Sep2015";		## UniRef DB Version
my $RepeatDB = "RepeatDB_07Oct2014";	        ## CRISPR DB Version
my %SPACER_ID;
my (@THREADS,@FILES);
my ($NUMBER_OF_SEQS,$NUMBER_OF_BASES) = 0;

## Check to see if BLAST installed and in the user's PATH
my $BLASTN = `which blastn`; unless ($BLASTN =~ m/blastn/) {	die "\n\n ERROR: External dependency 'blastn' not installed in system PATH\n\n (ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/)\n\n";}
my $BLASTX = `which blastx`; unless ($BLASTX =~ m/blastx/) {	die "\n\n ERROR: External dependency 'blastx' not installed in system PATH\n\n (ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/)\n\n";}

## Check to see that the casc_bin and casc_blast_dbs directories are in the programs working directory
my $script_working_dir = $FindBin::Bin;
unless ( -d "$script_working_dir/casc_bin" ) { die "\n ERROR: Cannot find CASC's bin directory \"casc_bin\" in the same directory as the Perl script\n\n @@ How did this happen? @@ \n\n You've either moved the Perl script or are using a symbolic " .
						   "link to the script.\n In order for CASC to run properly the Perl script, bin directory, and BLAST directory must all be in the same directory."; }
unless ( -d "$script_working_dir/casc_blast_dbs" ) { die "\n ERROR: Cannot find CASC's blast directory \"casc_blast_dbs\" in the same directory as the Perl script\n\n @@ How did this happen? @@ \n\n You've either moved the Perl script or are " . 
							 "using a symbolic link to the script.\n In order for CASC to run properly the Perl script, bin directory, and BLAST directory must all be in the same directory."; }

## What time is it?
my $DATE = dateTime();

## Format the infile's root
my $infile_root = basename($infile);
$infile_root = scalar reverse ($infile_root);
$infile_root =~ s/.*?\.//;
$infile_root = scalar reverse ($infile_root);

## If user did not specify an output directory, set up the default
if ($outdir =~ "./casc_output/") {
    print `mkdir -p $outdir`;                       ## need to create ./casc_output
    $outdir = "./casc_output/$infile_root-$DATE/";
}

## Create the initial output directories
print `mkdir -p $outdir`;
print `mkdir -p $outdir/component_processes/mCRT`;
print `mkdir -p $outdir/component_processes/split_multifasta`;

##################################################
##                   MAIN                       ##
##################################################
## Initialze
unless ($silent) {
    print "\n CASC\n Version: $version\n CRISPR Calling: $calling\n\n";
}
progress_bar( 1, $MAX, 50, '=' );

## Gather some basic statistics on the input
## file and make sure it's in FASTA format . . .
open(IN,"<$infile") || die "\n\n ERROR: Cannot find / open the input file $infile\n\n";
while(<IN>) {
    chomp;
    if ($_ =~ m/^>/) {
	$NUMBER_OF_SEQS++;
    }
    else {
	my $seq_string = $_;
	my $valid_bases = $seq_string =~ tr/ACGTURYKMSWBDHVNXacgturykmswbdhvnx/ACGTURYKMSWBDHVNXacgturykmswbdhvnx/;
	if ($valid_bases != length($_)) { die "\n\n ERROR: It appears your FASTA file contains non-nucleotide charecters\n $_\n\n Offending sequence:\n$_\n\n\n";}
	$NUMBER_OF_BASES += length($_);
    }
}
close(IN);
$PRGS+=10;
progress_bar( $PRGS, $MAX, 50, '=' );

## Split up the FASTA file
if ($NUMBER_OF_SEQS < $ncpus) {
    unless ($silent) {
	print "\n\n Warning: You cannot select more CPUs than you have input sequences\n ncpus = $ncpus\n seqs  = $NUMBER_OF_SEQS\n ncpus adjusted to $NUMBER_OF_SEQS\n\n";
    }
    $ncpus = $NUMBER_OF_SEQS;
}
my $seqs_per_file = $NUMBER_OF_SEQS / $ncpus;
$seqs_per_file = ceil($seqs_per_file);        ## Need to round this up

print `perl $script_working_dir/casc_bin/splitFASTA.pl $infile $outdir/component_processes/split_multifasta $infile_root $seqs_per_file >$outdir/component_processes/split_multifasta/stdout`;
for(1 .. $ncpus) {
    my $file_name = "$outdir/component_processes/split_multifasta/$infile_root" . "-" . "$_.fsa";
    push (@FILES, $file_name);
}
## ------------ ##

## Run mCRT to Call Putative CRISPR Spacers
foreach my $file (@FILES) {
    my $mod_file = basename($file);
    my $job = qq|java -jar -Xms128M -Xmx10240M $script_working_dir/casc_bin/CRT1.2b.jar $file $outdir/component_processes/mCRT/$mod_file.raw|;
    push (@THREADS, threads->create('task',"$job"));
}
foreach my $thread (@THREADS) {
    $thread->join();
    $PRGS+=(25/$ncpus);
    progress_bar( $PRGS, $MAX, 50, '=' );
}
if (-e "$outdir/component_processes/mCRT/$infile_root.raw") { print `rm $outdir/component_processes/mCRT/$infile_root.raw`;}
print `cat $outdir/component_processes/mCRT/*.raw > $outdir/component_processes/mCRT/$infile_root.raw`;
foreach my $file (@FILES) {
    my $mod_file = basename($file);
    print `rm $outdir/component_processes/mCRT/$mod_file.raw`;
}
print `cat $infile_root-*.repeat.fsa > $outdir/component_processes/mCRT/$infile_root.repeat.fsa`;
print `cat $infile_root-*.spacer.fsa > $outdir/component_processes/mCRT/$infile_root.spacer.fsa`;
print `rm $infile_root-*.repeat.fsa`;
print `rm $infile_root-*.spacer.fsa`;

my $putative_spacers = count_seqs("$outdir/component_processes/mCRT/$infile_root.spacer.fsa");
if ($putative_spacers == 0) {	progress_bar( $MAX, $MAX, 50, '=' ); if ($silent) { exit 0; } else { die my $death = death(); print $death;}}

## Create Remaining Output Directories
print `mkdir -p $outdir/component_processes/blastn`;
print `mkdir -p $outdir/component_processes/blastx`;
print `mkdir -p $outdir/component_processes/bonafide_lookup`;
print `mkdir -p $outdir/component_processes/extract_sequence`;

## Extract the original sequences of putative spacers
open(IN,"<$outdir/component_processes/mCRT/$infile_root.spacer.fsa") || die "\n Cannot open the spacer file $outdir/component_processes/mCRT/$infile_root.spacer.fsa\n\n";
while(<IN>) {
    chomp;
    my $line = $_;
    if ($line =~ m/^>/) {
	$line =~ s/-spacer-.*//;
	$line =~ s/^>//;
	$SPACER_ID{$line} = 1;
    }
}
close(IN);

open(OUT,">$outdir/component_processes/extract_sequence/$infile_root.fasta") || die "\n\n Cannot open the output file for sequence extraction process: $outdir/component_processes/extract_sequence/$infile_root.fasta\n\n";
open(IN,"<$infile") || die "\n\n Cannot open the original FASTA file $infile\n\n";
my $print_flag = 0;
while(<IN>) {
    chomp;
    my $line = $_;
    if ($line =~ m/^>/) {
	$line =~ s/^>//;
	$line =~ s/ .*//;
	if (exists $SPACER_ID{$line}) {
	    print OUT ">$line\n";
	    $print_flag =1 ;
	}
	else {	$print_flag = 0;}
    }
    elsif ($print_flag == 1) {
	print OUT $line, "\n";
    }
}
close(IN);
close(OUT);
$PRGS +=7;
progress_bar( $PRGS, $MAX, 50, '=' );

## Repeat BLASTn search.
my $blastn_string = "perl $script_working_dir/casc_bin/para_blastn.pl " . 
    "-q $outdir/component_processes/mCRT/$infile_root.repeat.fsa " . 
    "-d $script_working_dir/casc_blast_dbs/$RepeatDB " . 
    "-o $outdir/component_processes/blastn/$infile_root.btab " . 
    " -e 1e-5 -t $ncpus > $outdir/component_processes/blastn/para_blastn.log 2>&1";
print `$blastn_string`;

## Cas BLASTx search.
my $blastx_string = "perl $script_working_dir/casc_bin/para_blastx.pl " .
    "-q $outdir/component_processes/extract_sequence/$infile_root.fasta " .
    "-d $script_working_dir/casc_blast_dbs/$UniRefDB " .
    "-o $outdir/component_processes/blastx/$infile_root.btab " .
    " -e 1e-12 -t $ncpus > $outdir/component_processes/blastx/para_blastx.log 2>&1";
print `$blastx_string`;

## Create list of bonafide spacer arrays from the repeat BLAST and Cas BLAST
open(OUT,">$outdir/component_processes/bonafide_lookup/$infile_root.repeat.lookup");
open(IN,"<$outdir/component_processes/blastn/$infile_root.btab") || die "\n Cannot open the result file for the spacer BLASTn: $outdir/component_processes/blastn/$infile_root.btab\n";
my %REPEAT_ID;
while(<IN>) {
    chomp;
    my @fields = (split/\t/, $_);
    $fields[0] =~ s/-\d{1,3}$//;
    $fields[0] =~ s/repeat/spacer/;
    unless (exists $REPEAT_ID{$fields[0]}) {
	print OUT $fields[0], "\n";
    }
    $REPEAT_ID{$fields[0]} = 1;
}
close(IN);
close(OUT);

open(OUT, ">$outdir/component_processes/bonafide_lookup/$infile_root.cas.lookup") || die "Cannot write to $outdir/component_processes/bonafide_lookup/$infile_root.cas.lookup\n";
open(IN, "<$outdir/component_processes/blastx/$infile_root.btab") || die "\n Cannot open the result file for the Cas BLASTx: $outdir/component_processes/bonafide_lookup/$infile_root.cas.lookup\n";
my %BLASTX_RESULTS;
while(<IN>) {
    chomp;
    my @fields = split(/\t/, $_);
    unless (exists $BLASTX_RESULTS{$fields[0]}) {
	print OUT $fields[0], "\t", $fields[1], "\n";
	$BLASTX_RESULTS{$fields[0]} = $fields[1];
    }
}
close(IN);
close(OUT);
progress_bar( 95, $MAX, 50, '=' );

## Run the report generator
my $report_string = "perl $script_working_dir/casc_bin/spacer_report_gen.pl ";
$report_string .= "-f $infile ";
$report_string .= "-r $outdir/component_processes/bonafide_lookup/$infile_root.repeat.lookup ";
$report_string .= "-c $outdir/component_processes/bonafide_lookup/$infile_root.cas.lookup ";
$report_string .= "-s $outdir/component_processes/mCRT/$infile_root.spacer.fsa ";
$report_string .= "-v $version ";
$report_string .= "-x $conservative ";
$report_string .= "-y $NUMBER_OF_SEQS ";
$report_string .= "-z $NUMBER_OF_BASES ";
$report_string .= "-o $outdir/$infile_root";
print `$report_string`;
progress_bar( $MAX, $MAX, 50, '=' );

if (-z "$outdir/$infile_root.bonafide.spacer.fasta") {
    my $no_bonafide = no_bonafide();
    unless ($silent) {
	print $no_bonafide;
    }
}
else {
    my $suc_complete = complete();
    unless ($silent) {
	print $suc_complete;
    }
}
##################################################
##                SUBROUTINES                   ##
##################################################
sub count_seqs
{
    my $s = $_[0];
    my $seqs = 0;
    open(IN,"<$s") || die "\n Cannot open the temporary file: $s\n\n";
    while(<IN>) {
	chomp;
	if ($_ =~ m/^>/) {
	    $seqs++;
	}
    }
    close(IN);
    return($seqs);
}
sub dateTime
{
    my $date = "";
    my %month = (
        0   =>  "Jan", 1   =>  "Feb", 2   =>  "Mar",
        3   =>  "Apr", 4   =>  "May", 5   =>  "Jun",
        6   =>  "Jul", 7   =>  "Aug", 8   =>  "Sep",
        9   =>  "Oct", 10  =>  "Nov", 11  =>  "Dec"
    );
    my @timeDate = localtime(time);
    $timeDate[5] =~ s/^1/20/; 
    $date .= $timeDate[5] . "_" . $month{$timeDate[4]} . "_" . $timeDate[3] . "_";
    $date .= $timeDate[2] . $timeDate[1];
    return $date;
}
sub progress_bar
{
    my ( $got, $total, $width, $char ) = @_;
    $width ||= 25;
    $char  ||= '=';
    my $num_width = length $total;
    local $| = 1;
    unless ($silent) {
	printf "|%-${width}s| (%.2f%%)\r", 
              $char x (($width-1)*$got/$total). '>', $got, $total, 100*$got/
	      +$total;
    }
}
sub task
{
    system( @_ );
}
sub death
{
    my $death = q{

 . . .-.   .-. .-. .-. .-. .-. .-. .-. 
 |\| | |   |   |(   |  `-. |-' |(  `-. 
 ' ` `-'   `-' ' ' `-' `-' '   ' ' `-' 
                                                                                                                              
};
    $death .= " There were no putative spacers found in $infile\n Outputs have been written to $outdir";

}
sub no_bonafide
{
    my $no_bonafide = q{
. . .-.   .-. .-. . . .-.   .-. .-. .-. .-.   .-. .-. .-. .-. .-. .-. .-. 
|\| | |   |(  | | |\| |-|   |-   |  |  )|-    `-. |-' |-| |   |-  |(  `-. 
' ` `-'   `-' `-' ' ` ` '   '   `-' `-' `-'   `-' '   ` ' `-' `-' ' ' `-'

};
$no_bonafide .= " There were no bona fide putative spacers found in $infile\n Outputs have been written to $outdir\n\n";
}
sub complete
{
    my $successful_complete = q{
   ___ ___ ___ ___ ___ ___       ___                 _ 
  / __| _ \_ _/ __| _ \ _ \ ___ | __|__ _  _ _ _  __| |
 | (__|   /| |\__ \  _/   /(_-< | _/ _ \ || | ' \/ _` |
  \___|_|_\___|___/_| |_|_\/__/ |_|\___/\_,_|_||_\__,_|
 

 Final output files saved to:};

    $successful_complete .= " $outdir\n\n";
}
